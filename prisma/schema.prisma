// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Flight {
  id             Int      @id @default(autoincrement())
  airline        String
  departureCity  String
  arrivalCity    String
  departureDate  DateTime
  departureTime  String
  arrivalTime    String
  duration       String
  price          Float
  availableSeats Int
}

model Hotel {
  id           Int      @id @default(autoincrement())
  name         String
  address      String
  city         String
  country      String
  countryAbbr  String
  mainMoney    String
  money        String[]
  wordlPlugs   String[]
  stars        Int
  price        Float
  descriptions String
  typeRoom     String
  rate         Float
  equipment    String[] // Ajout de la colonne equipment
}

model Activity {
  id          Int    @id @default(autoincrement())
  countries   String
  countryAbbr String
  cities      String
  stars       Int
  title       String
  description String
  duration    String
  rating      Float
  reviews     Int
  price       Float
  image       String
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
